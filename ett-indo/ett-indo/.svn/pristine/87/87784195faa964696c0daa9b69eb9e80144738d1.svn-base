package com.web.rest.controller;

import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.annotation.Resource;
import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.domain.entity.BreakingAlert;
import com.domain.entity.DeviceToken;
import com.domain.entity.EttGiftPending;
import com.domain.entity.InviteBonusMsisdn;
import com.domain.entity.OfferDetails;
import com.domain.entity.OfferDetails.BalanceType;
import com.domain.entity.OffersStarted;
import com.domain.entity.PopUpAlert;
import com.domain.entity.PopUpSheduled;
import com.domain.entity.SchedulePush;
import com.domain.entity.User;
import com.domain.entity.UserAccount;
import com.domain.entity.UserAccountSummary;
import com.domain.entity.UserClickCallBackTracker;
import com.domain.entity.UserSource;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.repository.jpa.BreakingAlerDailyCheckRepository;
import com.repository.jpa.BreakingAlertRepository;
import com.repository.jpa.DeviceTokenRepository;
import com.repository.jpa.EttGiftPendingRepository;
import com.repository.jpa.FirstHitDayRepository;
import com.repository.jpa.InviteBonusMsisdnRepository;
import com.repository.jpa.OfferDetailsRepository;
import com.repository.jpa.OffersStartedRepository;
import com.repository.jpa.PopUpAlertRepository;
import com.repository.jpa.PopUpSheduledRepository;
import com.repository.jpa.RedeemThresholdRepository;
import com.repository.jpa.SchedulePushRepository;
import com.repository.jpa.UserAccountRepository;
import com.repository.jpa.UserAccountSummaryRepository;
import com.repository.jpa.UserBlackListRepository;
import com.repository.jpa.UserClickCallBackTrackerRepository;
import com.repository.jpa.UserRepository;
import com.repository.jpa.UserSourceRepository;
import com.service.EttApis;
import com.service.FirstHitService;
import com.service.Msisdn_30Service;
import com.service.OffersService;
import com.service.RechargeService;
import com.service.ReferrerService;
import com.web.rest.dto.BreakingAlertDto;
import com.web.rest.dto.OfferInstructionDto;
import com.web.rest.dto.OffersDtoV2;
import com.web.rest.dto.OffersDtoV4;
import com.web.rest.dto.OffersDtoV4Compress;
import com.web.rest.dto.OffersStartedDto;
import com.web.rest.dto.PopUpAlertDto;


/**
 * @author ankur
 */
@Controller
@RequestMapping(value = "/v4")
public class OffersControllerV4 {

    private static Logger LOGGER = LoggerFactory.getLogger(OffersControllerV4.class);

    @Inject 
    OffersService offersService;

    @Resource
    UserRepository userRepository;

    @Resource
    UserBlackListRepository userBlackListRepository;

    @Resource
    InviteBonusMsisdnRepository inviteBonusMsisdnRepository;
    
    @Resource
    EttApis ettApis;
    
    @Resource
    RechargeService rechargeService;

    @Resource
    OfferDetailsRepository offerDetailsRepository;
    
    @Resource
    UserClickCallBackTrackerRepository userClickCallBackTrackerRepository;
    
    @Resource
    DeviceTokenRepository deviceTokenRepository;
    
    @Resource
	SchedulePushRepository schedulePushRepository;

    @Resource
    EttGiftPendingRepository ettGiftPendingRepository;
    
    @Resource
    private ReferrerService referrerService;
    
    @Autowired 
    RedeemThresholdRepository redeemThresholdRepository;
    
    @Resource
    private UserAccountRepository userAccountRepository;
    
    @Resource
    private UserAccountSummaryRepository userAccountSummaryRepository;
    @Resource
    private BreakingAlertRepository breakingAlertRepository;

    @Resource
    private PopUpSheduledRepository popUpSheduledRepository;
    
    @Resource
    private PopUpAlertRepository popUpAlertRepository;
    
    @Resource
	private FirstHitDayRepository firstHitDayRepository;
    
    @Resource
    private BreakingAlerDailyCheckRepository breakingAlerDailyCheckRepository;
    
    @Resource
    private UserSourceRepository userSourceRepository;
    @Resource
    private FirstHitService firstHitDayService;
 
    @Resource
    OffersStartedRepository offersStartedRepository;

    @Resource
	private Msisdn_30Service msisdn_30Service;
    
    @RequestMapping(value = "user/offerStarted", method = RequestMethod.GET)
    @ResponseBody
    public ResponseEntity<?> getOfferStarted(@RequestParam("ettId") long ettId,
    										 @RequestParam("otp") long otp,
    										 @RequestParam(value="limit", required=false, defaultValue="30") int limit,
    										 @RequestParam(value="isCompressed", required=false, defaultValue="true") boolean isCompressed
	) {
    	LOGGER.info("user/offerStarted/ ettId={},otp={},limit={}",ettId,otp,limit);
    	if(ettApis.getBlackListStatus(ettId)) {
			LOGGER.info("ettId BlackListed {}",ettId);
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
    	User user = userRepository.findByEttId(ettId);
    	if(user == null)
    		return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
    		if(user.getOtp()!=0 && user.getOtp()!=otp) {
    			ettApis.sendUNAUTHORIZEDEdr(ettId, 0);
    			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
    		}
    		
    		List<OffersStarted> offerStarted = offersStartedRepository.findByEttId(ettId);
    		if(offerStarted==null || offerStarted.size()==0){
    			return new ResponseEntity<>(HttpStatus.OK);
    		}
    		
    		List <OffersStartedDto> offerStartedDto = new ArrayList<OffersStartedDto>(offerStarted.size());
    		for(OffersStarted offersStart : offerStarted){
    			//done by sumeet sir on 25-08-2015
    			if(offersStart.getPayOutType().equals("INSTALL") && (offersStart.getOfferLifeCycle().indexOf("Use")>=0 || offersStart.getOfferLifeCycle().indexOf("Open")>=0)) {
    				LOGGER.info("Offer payout is INSTALL and the offerLifeCycle contains Use or Open for not showing in offersStarted ettId={},offerId={}",user.getEttId(),offersStart.getOfferId());
    				continue;
    			}
    			if(offersStart.getPayOutType().equals("INSTALL") && ((new Date().getTime())-offersStart.getInstalledTime().getTime())>10800000l) {
    				LOGGER.info("Offer PayoutType is INSTALL and the time is more the 3 hour so not showing in offerstarted ettId={},offerId={}",user.getEttId(),offersStart.getOfferId());
    				continue;
    			}
    			OffersStartedDto offersStartDto = new OffersStartedDto();
    			offersStartDto.setOfferId(offersStart.getOfferId());
    			offersStartDto.setOfferCategory(offersStart.getOfferCategory());
    			offersStartDto.setImageUrl(offersStart.getImageUrl());
    			offersStartDto.setOfferName(offersStart.getOfferName());
    			offersStartDto.setPayoutType(offersStart.getPayOutType());
    			if(Float.parseFloat(user.getAppVersion())>1.5f){
    				offersStartDto.setPackageName(offersStart.getPackageName());
    			}
    			if(offersStartDto.getPayoutType().equals("DEFFERED")) {
    				
    				try {
    					offersStartDto.setUserDeferedInfo(offersStart.getUserDeferedInfo().replace("20B9",(char) Integer.parseInt( "20B9", 16 )+""));
    				}catch(Exception ex){}
    				try {
    					offersStartDto.setDeferedPaymentFinalInfor(offersStart.getDeferedPaymentFinalInfor().replace("20B9",(char) Integer.parseInt( "20B9", 16 )+""));
    				}catch(Exception ex){}
    				//offersStartDto.setInstructions(offersStart.getInstructions());
    				offersStartDto.setUserDeferedInfo(offersStart.getUserDeferedInfo().replace("20B9",(char) Integer.parseInt( "20B9", 16 )+""));
    				offersStart.setInstructions(offersStart.getInstructions().replace("20B9",(char) Integer.parseInt( "20B9", 16 )+""));
    				if(offersStart.getInstructions() !=null) {
    					try {
    						String instruction[] = offersStart.getInstructions().split(";");
    						String instructionText [] = new String[instruction.length];
    						String instStringRate [] = new String[instruction.length];
    						int ii =0;
    						List<OfferInstructionDto> OfferInstructionDtolist = new ArrayList<OfferInstructionDto>(instruction.length);
    						for(String inst:instruction){
    							//instructionText[ii]=inst.split("#")[0];
    							//instStringRate[ii]=inst.split("#")[1];
    							OfferInstructionDto offerInstructionDto = new OfferInstructionDto();
    							offerInstructionDto.setInstructionsText(inst.split("\\$")[0]);
    							offerInstructionDto.setInstStringAmount(inst.split("\\$")[1]);
    							
    							if(ii==00){
    								offerInstructionDto.setStatus(1);
    							}
    							else {
    								offerInstructionDto.setStatus(0);
    							}
    							ii++;
    							OfferInstructionDtolist.add(offerInstructionDto);
    						}
    						offersStartDto.setOfferInstructionDto(OfferInstructionDtolist);
    						//offersDto.setInstructionsText(instructionText);
    						//offersDto.setInstStringAmount(instStringRate);
    						
    					}
    					catch(Exception exx1){
    						LOGGER.error("[error in instruction configuraion ettId]["+offersStart.getEttId()+"]");
    					}
    					
    				}
    				
    			}
    			else if(offersStartDto.equals("INSTALL")) {
    				offersStartDto.setOfferLifeCycle(offersStart.getOfferLifeCycle());
    				offersStartDto.setApproveInfoText(offersStart.getApproveInfoText());
    				offersStartDto.setCriticalInfo(offersStart.getCriticalInfo());
    				offersStartDto.setEarnInfo(offersStart.getEarnInfo());
    			}
    			else{
    				offersStartDto.setDeferedPaymentFinalInfor(offersStart.getDeferedPaymentFinalInfor());
    				//offersStartDto.setInstructions(offersStart.getInstructions());
    				offersStartDto.setOfferLifeCycle(offersStart.getOfferLifeCycle());
    				offersStartDto.setApproveInfoText(offersStart.getApproveInfoText());
    				offersStartDto.setCriticalInfo(offersStart.getCriticalInfo());
    				offersStartDto.setEarnInfo(offersStart.getEarnInfo());

    			}
    			offerStartedDto.add(offersStartDto);
    		}
    		
    		try {
    	    	if(rechargeService.getAppConfig().get("IsOfferDataCompress").equals("true") && isCompressed == true) {
    		    	//Object offerDto = getOffersDto(user, offersList,threshold,userAccount,isTodayFirst);
    		    	//Gson gson = new Gson();
    		    	
    		    	Gson gson = new Gson();
    		    	String json = gson.toJson(offerStartedDto);
    		    	//System.out.println("[json]["+json+"]");
    		    	byte [] compressed = offersService.compress(json);
    		    	OffersDtoV4Compress offersDtoV4Compress = new OffersDtoV4Compress();
    		    	offersDtoV4Compress.setIsCompress(true);
    		    	offersDtoV4Compress.setOfferDetails(compressed);
    		    	return new ResponseEntity<>(offersDtoV4Compress, HttpStatus.OK);
    	    	}
    	    	else{
    	    		return new ResponseEntity<>(offerStartedDto,HttpStatus.OK);
    	    	}
        	}catch(Exception ex){
        		return new ResponseEntity<>(offerStartedDto,HttpStatus.OK);
        	}
    		//return new ResponseEntity<>(offerStartedDto,HttpStatus.OK);
	}


    @RequestMapping(value = "user/singleOffer/", method = RequestMethod.GET)
    @ResponseBody
    public ResponseEntity<?> getOfferDetails(@RequestParam("ettId") long ettId,
    											@RequestParam("otp") int otp,
    											@RequestParam("offerId") long offerId,
    											@RequestParam(value = "networkType", required=false, defaultValue="UNKNOWN") String networkType) {
    		LOGGER.info("user/offersDetails/ ettId={},otp={},offerId={},networkType{}", ettId, otp, offerId,networkType);
    		if(ettApis.getBlackListStatus(ettId)) {
    			LOGGER.info("ettId BlackListed {}",ettId);
    			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
    		}

        	User user = userRepository.findByEttId(ettId);
        	if(user == null)
        		return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
        		
    		if(user.getOtp()!=0 && user.getOtp()!=otp) {
    			ettApis.sendUNAUTHORIZEDEdr(ettId, 0);
    			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
    		}

    		UserAccount userAccount = userAccountRepository.findByEttId(ettId);
        	if(userAccount == null){
        		LOGGER.info("insert in userAccount with 0 ettId = "+ettId);
    			userAccount = new UserAccount();
    			userAccount.setEttId(user.getEttId());
    			userAccount.setCurrentBalance(0);
    			//userAccount.setBalanceCoins(Integer.parseInt(rechargeService.getProperties().getProperty("JOINING_COIN"))); //5 coin for opening the A/C
    			userAccount = userAccountRepository.save(userAccount);
        	}
    		//List<OfferDetails> offersList = offersService.getOffers(user, false,networkType);
        	List<Long> offerIdList = new ArrayList<Long>();
        	offerIdList.add(offerId);
        	List<OfferDetails> singleOffer = offerDetailsRepository.findByOfferIdInStatus(offerIdList);
        	//LOGGER.info("offer size for ettId={}&size={}",ettId, offersList.size());
        	if(singleOffer == null) {
        		return new ResponseEntity<>("", HttpStatus.OK);
        	}
        	offersService.freshUserBonusOffer(singleOffer,user);
        	return new ResponseEntity<>(getOfferDtoList(user, singleOffer,false), HttpStatus.OK);
    		//return new ResponseEntity<>(getOffersDetailsDto(user,offerId), HttpStatus.OK);
    	//return "";			
    }
    
    @RequestMapping(value = "user/offers/", method = RequestMethod.GET)
    @ResponseBody
    public ResponseEntity<?> getBalance(@RequestParam("ettId") long ettId,
    									@RequestParam(value = "networkType", required=false, defaultValue="UNKNOWN") String networkType,
    									@RequestParam(value="isLogin", required=false, defaultValue="false") boolean isLogin,
    									@RequestParam("otp") int otp,
    									@RequestParam(value="tempOtp", required=false, defaultValue="0") int tempOtp,
    									@RequestParam(value="deviceId", required=false) String deviceId,
    									@RequestParam(value="version", required=false, defaultValue="0.0") float version,
    									@RequestParam(value="isCompressed", required=false, defaultValue="true") boolean isCompressed
    ) {
    	LOGGER.info("user/offers/ ettId={},networkType={},isLogin={},otp={},tempOtp={},deviceId={},version={}", ettId, networkType,isLogin,otp,tempOtp,deviceId,version);
    	//add app size
    	if(ettApis.getBlackListStatus(ettId)) {
			LOGGER.info("ettId BlackListed {}",ettId);
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}

    	User user = userRepository.findByEttId(ettId);
    	if(user == null)
    		return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
    		
		if(user.getOtp()!=0 && user.getOtp()!=otp) {
			ettApis.sendUNAUTHORIZEDEdr(ettId, 0);
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		UserAccount userAccount = userAccountRepository.findByEttId(ettId);
    	if(userAccount == null){
    		LOGGER.info("insert in userAccount with 0 ettId = "+ettId);
			userAccount = new UserAccount();
			userAccount.setEttId(user.getEttId());
			userAccount.setCurrentBalance(0);
			//userAccount.setBalanceCoins(Integer.parseInt(rechargeService.getProperties().getProperty("JOINING_COIN"))); //5 coin for opening the A/C
			userAccount = userAccountRepository.save(userAccount);
    	}
		/*********************************************************************************************************************/
		if(!user.isVerified() && otp!=0){
		LOGGER.info("verifying ettId="+ettId);
		user.setRegDate(new Date());
		user.setVerified(true);
		user.setFlage(false);
		user.setUpdatedTime(new Date());
		user.setFirstLogin(true);
		DeviceToken deviceTokenobj = deviceTokenRepository.findByEttId(ettId);
		//boolean deviceTokenValueChange=false;
		if(deviceTokenobj == null) {
			deviceTokenobj = new DeviceToken();
			deviceTokenobj.setDeviceId(user.getDeviceId());
			deviceTokenobj.setCreatedTime(new Date());
			deviceTokenobj.setUpdatedTime(new Date());
			deviceTokenobj.setEttId(user.getEttId());
			deviceTokenobj.setActive(false);
			deviceTokenRepository.save(deviceTokenobj);
		}
		else{
			if(deviceTokenobj.isActive()==false) {
				deviceTokenobj.setActive(true);
				deviceTokenRepository.save(deviceTokenobj);
			}
		}
		//deviceTokenRepository.save(deviceTokenobj);
		if( (deviceTokenobj.getAndroidId()!=null && deviceTokenobj.getAndroidId().length()>0) || (deviceTokenobj.getAdvertisingId()!=null && deviceTokenobj.getAdvertisingId().length()>0) || (deviceTokenobj.getMacAddress()!=null && deviceTokenobj.getMacAddress().length()>0)) {
			referrerService.setPromotionClickEvent(user);
		}
		if(rechargeService.getAppConfig().get("NEW_USER_PUSH_CHECK").equals("true"))
			ettApis.sendPush(rechargeService.getLocaleTextTemplate().get("NEW_USER_PUSH_"+user.getLocale()), deviceTokenobj.getDeviceToken(),user.getEttId());
			
			if(rechargeService.getAppConfig().get("NEW_USER_BONUS_ON_FIRST_APP").equals("true")){
				//sendPush(properties.getProperty("NEW_USER_SECOND_PUSH"), updatedDeviceToken.getDeviceToken());
				SchedulePush schedulePush = new SchedulePush();
				schedulePush.setEttId(user.getEttId());
				schedulePush.setMessage(rechargeService.getLocaleTextTemplate().get("NEW_USER_SECOND_PUSH_"+user.getLocale()));
				java.util.Date datetime = new java.util.Date();
				datetime.setTime(datetime.getTime()+360000);
				schedulePush.setPushTime(datetime);
				schedulePushRepository.save(schedulePush);
				}
			float aver = 0.0f;
			if(version>0.0) {
	    		try {
	    				aver = Float.parseFloat(user.getAppVersion());
	    		}catch(Exception ex1){}
	    		if(aver<version) {
	    			user.setAppVersion(version+"");
	    		}
			}
		   		//user = userRepository.save(user);
				//if(deviceTokenobj.getAndroidId()!=null && deviceTokenobj.getAdvertisingId()!=null && deviceTokenobj.getMacAddress()!=null && deviceTokenobj.getAndroidId().length()>0)
				//if( (deviceTokenobj.getAndroidId()!=null && deviceTokenobj.getAndroidId().length()>0) || (deviceTokenobj.getAdvertisingId()!=null && deviceTokenobj.getAdvertisingId().length()>0) || (deviceTokenobj.getMacAddress()!=null && deviceTokenobj.getMacAddress().length()>0)) {
						referrerService.giveInviteCredit(user);
				//}
				/*else {
					LOGGER.info("User AndroidId not updated ettId={}",user.getEttId());
				}*/
		   		
					/*if(rechargeService.getProperties().getProperty("INVITE_OFFER_ETT_DOWNLOAD_CALLBACK_AVAILABLE").equals("true") ){
		   			if(!user.isDownloadedFirstApp()) {
			   			referrerService.rewardReffrerOnDownloadEtt(user);  
						//userRepository.save(user);
		   			}
		   			else {}
		   		}
		   		else if(rechargeService.getProperties().getProperty("INVITE_OFFER_ETT_DOWNLOAD_AVAILABLE").equals("true") && !user.isDownloadedFirstApp()){
		   				//referrerService.rewardReffrerOnDownloadEtt(user);  
		   				//user.setDownloadedFirstApp(true);
		   				//referrerService.setPromotionClickEventFirstAppDownload(user);
		   				//userRepository.save(user);
		   		}
		   		else {
		   			referrerService.rewardReffrerOnDownloadEttZeroSummary(user);
		   		}
*/		   		
		   		//Giving Pending Gift to User
		   		List<EttGiftPending> ettGiftPending = ettGiftPendingRepository.findByMsisdnInStatus(user.getMsisdn(),false);
		   	if(ettGiftPending !=null && ettGiftPending.size()>0) {
		   		for(EttGiftPending ettGiftPending1: ettGiftPending) {
		   			UserAccount userAccount2 = userAccountRepository.findByEttId(ettId);
		   			if(userAccount2==null) {
		   				userAccount2 = new UserAccount();
		   			}
		   			userAccount2.setCurrentBalance(userAccount2.getCurrentBalance()+ettGiftPending1.getAmount());
		   			userAccountRepository.save(userAccount2);
		   			UserAccountSummary userAccountSummary = new UserAccountSummary();
		   			userAccountSummary.setEttId(ettId);
		   			userAccountSummary.setAmount(ettGiftPending1.getAmount());
		   			userAccountSummary.setCreatedTime(new java.util.Date());
		   			userAccountSummary.setOfferId(8883l);
		   			userAccountSummary.setRemarks("GIFT_"+ettGiftPending1.getEttId());
		   			User userSend = userRepository.findByEttId(ettGiftPending1.getEttId());
		   			userAccountSummary.setOfferName("gift from "+userSend.getMsisdn());
		   			userAccountSummaryRepository.save(userAccountSummary);
		   			
		   			SchedulePush schedulePush = new SchedulePush();
					schedulePush.setEttId(user.getEttId());
					schedulePush.setMessage(ettGiftPending1.getMsg());
					java.util.Date datetime = new java.util.Date();
					schedulePush.setPushTime(datetime);
					schedulePushRepository.save(schedulePush);
		   		}
				ettGiftPendingRepository.updateStatus(user.getMsisdn());
		   	}
		
		   	/****************** INVITE BONUS ***************************************/
		   	if(rechargeService.getAppConfig().get("INVITE_BONUS").equals("true")){
		   		InviteBonusMsisdn inviteBonusMsisdn = inviteBonusMsisdnRepository.findByMsisdn(user.getMsisdn());
		   		if(inviteBonusMsisdn!=null && inviteBonusMsisdn.getStatus()==0) {
		   			msisdn_30Service.giveInviteMoney(user, inviteBonusMsisdn);
		   		}
		   		
		   	}
		   	/****************** INVITE BONUS ***************************************/
		}
		/*********************************************************************************************************************/
		/*if(isLogin){
    		LOGGER.info("login ettId="+ettId);
    		user.setFlage(false);
    		user.setUpdatedTime(new Date());
    		user = userRepository.save(user);
    	}*/
		user.setFlage(false);
		//boolean isTodayFirst =  firstHitDayService.checkFistHitDay(user);
		boolean ispopUpEnable = false;
		List<PopUpSheduled> popUpSheduleds = popUpSheduledRepository.findByEttIdStatus(user.getEttId(),true);
		if(popUpSheduleds!=null && popUpSheduleds.size()>0){
			ispopUpEnable=true;
		}
		boolean isBreakingAlertToday = firstHitDayService.checkBreakingAlertDailyCheck(user);
		if(ispopUpEnable) {
			PopUpSheduled popUpSheduled = popUpSheduleds.get(0);
			popUpSheduled.setPopUpTime(new Date());
			popUpSheduled.setStatus(false);
			popUpSheduledRepository.save(popUpSheduled);
		}
		user.setUpdatedTime(new Date());
   		user = userRepository.save(user);
   		
   		float threshold = ettApis.getThresholdAmont(user);
    	
    	List<OfferDetails> offersList = offersService.getOffers(user, false,networkType);
    	//LOGGER.info("offer size for ettId={}&size={}",ettId, offersList.size());
    	try {
	    	if(rechargeService.getAppConfig().get("IsOfferDataCompress").equals("true") && isCompressed == true) {
		    	Object offerDto = getOffersDto(user, offersList,threshold,userAccount,ispopUpEnable,isBreakingAlertToday);
		    	//Gson gson = new Gson();
		    	
		    	Gson gson = new GsonBuilder().serializeNulls().create();
		    	String json = gson.toJson(offerDto);
		    	//System.out.println("[json]["+json+"]");
		    	byte [] compressed = offersService.compress(json);
		    	OffersDtoV4Compress offersDtoV4Compress = new OffersDtoV4Compress();
		    	offersDtoV4Compress.setIsCompress(true);
		    	offersDtoV4Compress.setOfferDetails(compressed);
		    	return new ResponseEntity<>(offersDtoV4Compress, HttpStatus.OK);
	    	}
	    	else{
	    		return new ResponseEntity<>(getOffersDto(user, offersList,threshold,userAccount,ispopUpEnable,isBreakingAlertToday), HttpStatus.OK);
	    	}
    	}catch(Exception ex){
    		return new ResponseEntity<>(getOffersDto(user, offersList,threshold,userAccount,ispopUpEnable,isBreakingAlertToday), HttpStatus.OK);
    	}
    }

	private Object getOffersDto(User user, List<OfferDetails> offersList, float threshold,UserAccount userAccount,boolean isTodayFirst,boolean isBreakingAlertToday) {
		OffersDtoV4 offersDtoV4 = new OffersDtoV4();
		if(userAccount.getCurrentBalance()>=threshold)
			offersDtoV4.setRedeem(true);
		
		offersDtoV4.setBalance(userAccount.getCurrentBalance());
		//getBalanceDto.setBalanceCoins(userAccount.getBalanceCoins());
		offersDtoV4.setThreshold(threshold);
		String btext = rechargeService.getLocaleTextTemplate().get("BALANCE_TEXT_"+user.getLocale()).replaceFirst("#BALANCE#", userAccount.getCurrentBalance()+"");
		offersDtoV4.setBalanceText(btext);
		offersDtoV4.setBestOffersText(rechargeService.getLocaleTextTemplate().get("BEST_OFFERS_TEXT_"+user.getLocale()));
		offersDtoV4.setInviteFriendText(rechargeService.getLocaleTextTemplate().get("INVITE_TEXT_"+user.getLocale()));
		String con = rechargeService.getAppConfig().get("INVITE_MESSAGE").replaceFirst("#ETT_ID#", userAccount.getEttId()+"");
		con = con.replaceFirst("#DATE#", System.currentTimeMillis()+"");
		offersDtoV4.setInviteFriendUrlText(con);
		offersDtoV4.setAppVersion(rechargeService.getAppConfig().get("CURRENT_ANDROID_VERSION"));
		offersDtoV4.setAppVersionUpdate(rechargeService.getAppVersionUpdate().get(user.getAppVersion()));
		
		offersDtoV4.setUpdateText(rechargeService.getLocaleTextTemplate().get("UPDATE_TEXT_"+user.getLocale()));
		//getBalanceDto.setAddOn(true);
		if(rechargeService.getAppConfig().get("ADD_ON").equals(true))
		{
			offersDtoV4.setAddOn(true);
		}
		else{
			offersDtoV4.setAddOn(false);
		}
		
		if(user.isFlage()){
			offersDtoV4.setNotRegister(true);
		}
		else {
			offersDtoV4.setNotRegister(false);
		}
		if(rechargeService.getIsDeviceSupport().get(user.getIsDeviceSupport()).equals("T")){
		//offersDtoV4.setNotRegister(false);
			offersDtoV4.setDeviceNotSupport(false);
		}
		else {
			//offersDtoV4.setNotRegister(true);
			LOGGER.info("USER BLOCK as the Device Support Parameter is false ettId={}",user.getEttId());
			offersDtoV4.setDeviceNotSupport(true);
		}
		/*if(user.isFlage()){			
			offersDtoV4.setNotRegister(true);
		}
		else{
			offersDtoV4.setNotRegister(false);
		}*/
		try{
			offersDtoV4.setOfferRefeshTimer(Integer.parseInt(rechargeService.getAppConfig().get("OFFER_REFERESH_TIMER")));
		}catch(Exception ex){}
		offersDtoV4.setInviteTabText(rechargeService.getLocaleTextTemplate().get("INVITE_TAB_TEXT_"+user.getLocale()));
		
		List<OffersDtoV2> offersDtoList = new ArrayList<>(offersList.size());
		offersDtoList = getOfferDtoList(user,offersList,true);
		
		//return offersDtoList;
		offersDtoV4.setOffersDto(offersDtoList);
		boolean isBreakingAlert = false;
		if(rechargeService.getAppConfig().get("IFBREAKINGALERTONCE_DAY").equals("true"))
		{
			if(isBreakingAlertToday) {
				isBreakingAlert = true;
			}
		}
		else {
			isBreakingAlert = false;
		}
		if(isBreakingAlert)
		{
			List<BreakingAlert> breakingAlert1;
			OffersDtoV2 D123 = new OffersDtoV2();
			D123.setOfferId(374l);
			int checkD123 = offersDtoList.indexOf(D123);
			if(checkD123>=0)
			{
				D123= offersDtoList.get(checkD123);
				breakingAlert1 = breakingAlertRepository.findById(true,3l);
				breakingAlert1.get(0).setText(D123.getDescription());
				breakingAlert1.get(0).setActionUrl(D123.getActionUrl());
				offersDtoList.remove(D123);
				
			}
			else if(Float.parseFloat(user.getAppVersion())<1.6f){
				breakingAlert1 = breakingAlertRepository.findById(true,2l);
			}
			else{
				breakingAlert1 = breakingAlertRepository.findById(true,1l);
			}
			BreakingAlertDto breakingAlertDto = null;
			if(breakingAlert1 != null && breakingAlert1.size()>0) {
				breakingAlertDto = new BreakingAlertDto();
				BreakingAlert breakingAlert = breakingAlert1.get(0);
				breakingAlertDto.setText(breakingAlert.getText());
				breakingAlertDto.setImageUrl(breakingAlert.getImageUrl());
				breakingAlertDto.setValidity(breakingAlert.getValidity());
				breakingAlertDto.setClickable(breakingAlert.getClickable()+"");
				breakingAlertDto.setOnClickType(breakingAlert.getOnClickType()+"");
				breakingAlertDto.setOfferId(breakingAlert.getOfferId());
				breakingAlertDto.setActionUrl(breakingAlert.getActionUrl().replace("#ETTID#", user.getEttId()+""));
				breakingAlertDto.setMenuName(breakingAlert.getMenuName());
				breakingAlertDto.setPopUpHeading(breakingAlert.getPopUpHeading());
				breakingAlertDto.setPopUpText(breakingAlert.getPopUpText());
				if(breakingAlert.getPopUpButtonText() != null)
					breakingAlertDto.setPopUpButtonText(breakingAlert.getPopUpButtonText().split(";"));
				if(breakingAlert.getPopUpActionUrl() != null){
					breakingAlertDto.setPopUpActionUrl(breakingAlert.getPopUpActionUrl().split(";"));
				}
				breakingAlertDto.setVisualCode(breakingAlert.getVisualCode());
			}
			offersDtoV4.setBreakingAlertDto(breakingAlertDto);
		}
		if(isTodayFirst){
			PopUpAlert popUpAlert = popUpAlertRepository.findById(1l,true);
			PopUpAlertDto popUpAlertDto = new PopUpAlertDto();
			if(popUpAlert != null) {
				popUpAlertDto.setHeading(popUpAlert.getHeading());
				popUpAlertDto.setText(popUpAlert.getText());
				popUpAlertDto.setNoOfButton(popUpAlert.getNoOfButton());
				if(popUpAlert.getButtonsText() != null){
					popUpAlertDto.setButtonsText(popUpAlert.getButtonsText().split(";"));
				}
				if(popUpAlert.getActinoUrl() != null) {
					popUpAlertDto.setActinoUrl(popUpAlert.getActinoUrl().split(";"));
				}
			
			}
			offersDtoV4.setPopUpAlertDto(popUpAlertDto);
		}
		offersDtoV4.setInvitingHeadingText(rechargeService.getLocaleTextTemplate().get("INVITE_HEADING_TEXT1.4_"+user.getLocale()));
		offersDtoV4.setInvitingBodyText(rechargeService.getLocaleTextTemplate().get("INVITE_BODY_TEXT1.4_"+user.getLocale()));
		//offersDtoV4.setRateUs(isRateUs);
		if(rechargeService.getAppConfig().get("isRateUs").equalsIgnoreCase("true")) {
			offersDtoV4.setRateUs(true);
		}
		else {
			offersDtoV4.setRateUs(false);
		}
		if(rechargeService.getAppConfig().get("defaultAction").equalsIgnoreCase("true")) {
			offersDtoV4.setDefaultAction(true);
		}
		else {
			offersDtoV4.setDefaultAction(false);
		}
		if(rechargeService.getAppConfig().get("featureAction").equalsIgnoreCase("true")) {
			offersDtoV4.setFeatureAction(true);
		}
		else {
			offersDtoV4.setFeatureAction(false);
		}
		offersDtoV4.setOfferCount(Integer.parseInt(rechargeService.getAppConfig().get("offerCount")));
		
		
		List<String> msisdnList = referrerService.getMsisdnList(user.getEttId(), 121l, 0, 100);
		offersDtoV4.setRemindCounter(msisdnList.size());
		//offersDtoV4.setInviteAmount(msisdnList.size()*Integer.parseInt(rechargeService.getProperties().getProperty("INVITE_OFFER_FIRST_DOWNLOAD_MONEY")));
		
		//offersDtoV4.setInviteAmount(Integer.parseInt(rechargeService.getProperties().getProperty("INVITE_MONEY"))+Integer.parseInt(rechargeService.getProperties().getProperty("INVITE_OFFER_FIRST_DOWNLOAD_MONEY")));
		OfferDetails offerDetailsInvite = offerDetailsRepository.findByOfferId(230l);
		if(offerDetailsInvite!=null){
			offersDtoV4.setInviteAmount(offerDetailsInvite.getOfferAmount());
		}
		if(rechargeService.getAppConfig().get("isShopping").equals("true")){
 			offersDtoV4.setShoppingTab(true);
		}
		else {
			offersDtoV4.setShoppingTab(false);
		}
		if(rechargeService.getAppConfig().get("isRecommended").equals("true")){
			offersDtoV4.setRecommendedTab(true);
		}
		else {
			offersDtoV4.setRecommendedTab(true);
		}
		return offersDtoV4;
	}
	
	public List<OffersDtoV2> getOfferDtoList(User user,List<OfferDetails> offersList,boolean isBulkOffer) {
		List<OffersDtoV2> offersDtoList = new ArrayList<>(offersList.size());
		/*UserSource userSource = userSourceRepository.findByEttId(user.getEttId());
		boolean userIsInvite  = false;
		if(userSource!=null && userSource.getUtmMedium().equals("INVITE")) {
			userIsInvite = true;
			List<UserAccountSummary> todaysInvite = null;
			try {
				todaysInvite = userAccountSummaryRepository.getTodaysGift(Long.parseLong(userSource.getUtmSource()),121l,ettApis.convertDBDate());
			}catch(Exception ex) {ex.printStackTrace();
			LOGGER.info("error in getting the todays invite ettId={},parentEttId={}",user.getEttId(),userSource.getUtmSource());
			}
			if(todaysInvite != null && todaysInvite.size()==1) {
				LOGGER.info("This User is Ist Invite of the day of his parent so allowing it ettId={},parentEttId={}",user.getEttId(),userSource.getUtmSource());
				userIsInvite = false;
			}
		}*/
		for(OfferDetails offerDetails : offersList){
			//if(isBulkOffer &&(offerDetails.getOfferId()==409l || offerDetails.getOfferId()==436l)){
			if(isBulkOffer && (rechargeService.getOFFERID_BARRED().contains(offerDetails.getOfferId()+""))) {
				continue;
			}
			if(user.getStatus()>=2 && (offerDetails.getOfferId()== 17 || offerDetails.getOfferId()== 47)) {
				LOGGER.info("User found in Froud list so not showing the offer ettId={},offerId={},status={}",user.getEttId(),offerDetails.getOfferId(),user.getStatus());
				continue;
			}
			/*if(userIsInvite == true && user.isDownloadedFirstApp()==false && offerDetails.getBalanceType().equals(BalanceType.INSTALL)) {
				LOGGER.info("User is referal and did not get callback so leaving the INSTALL offer ettId={},offerId={}",user.getEttId(),offerDetails.getOfferId());
				continue;
			}*/
	
			/*if(((user.getIsDeviceSupport()>=6 && user.getIsDeviceSupport()<=11)||user.isDownloadedFirstApp()==false) && offerDetails.getBalanceType().equals(BalanceType.INSTALL)) {
				LOGGER.info("Install offer not show to user ettId={},offerId={},userDeviceSuport parameter={}",user.getEttId(),offerDetails.getOfferId(),user.getIsDeviceSupport());
				continue;
			}*/
			
			/*if(user.getStatus()==2 && offerDetails.getBalanceType().equals(BalanceType.INSTALL)) {
				LOGGER.info("User falling in fraud category not showing INSTALL offer ettId={},offerId={}",user.getEttId(),offerDetails.getOfferId());
				continue;
			}*/
			OffersDtoV2 offersDto = new OffersDtoV2();
			offersDto.setOfferId(offerDetails.getOfferId());
			offersDto.setText(offerDetails.getOfferName());
			offersDto.setDescription(offerDetails.getDescription().replace("#INSTALLEDAMOUNT#", (offerDetails.getOfferAmount()-offerDetails.getPendingAmountCredit()+"")).replace("#AMOUNT#", offerDetails.getOfferAmount()+"").replace("#OFFER_CREDIT_DAYS#", offerDetails.getBalanceCreditInDays()+"").replace("#PENDINGAMOUNT#", offerDetails.getPendingAmountCredit()+"").replace("#PENDINGRECCOUNT#", offerDetails.getPendingRecCount()+"").replace("#PENDINGRECDAY#", offerDetails.getPendingRecDay()+"").replace("Rs.",(char) Integer.parseInt( "20B9", 16 )+""));
			
			offersDto.setAppKey(offerDetails.getAppKey());
			offersDto.setOfferName(offerDetails.getOfferName());
			offersDto.setImageUrl(offerDetails.getImageUrl());
			//String urlAppend = URLEncoder.encode("&msisdn="+msisdn+"&ettId="+ettId+"&tId="+System.currentTimeMillis()+"&offerId="+offerDetails.getOfferId());
			//msisdn,ettId,tId,offerId
			String actionUrl = null;
			String param = offerDetails.getActionUrl().substring(offerDetails.getActionUrl().lastIndexOf("=")+1);
			//if(param.indexOf("|")>-1 && rechargeService.getProperties().getProperty("OfferUrlParamFromDB").equals("true")){
			if(offerDetails.isOfferUrlParamFromDB()) {
				String callBackTid = System.currentTimeMillis()+"";
				String curamount[] = param.split("\\|");
				UserClickCallBackTracker userClickCallBackTracker = new UserClickCallBackTracker();
				userClickCallBackTracker.setBalanceCreditInDays(offerDetails.getBalanceCreditInDays());
				userClickCallBackTracker.setCurrency(Integer.parseInt(curamount[1]));
				userClickCallBackTracker.setEttId(user.getEttId());
				userClickCallBackTracker.setId(callBackTid);
				userClickCallBackTracker.setIncomeAmount(Float.parseFloat(curamount[0]));
				userClickCallBackTracker.setInstalledAmount(offerDetails.getInstalledAmount());
				userClickCallBackTracker.setMsisdn(user.getMsisdn());
				userClickCallBackTracker.setOfferAmount(offerDetails.getOfferAmount());
				userClickCallBackTracker.setOfferCat(offerDetails.getOfferCat());
				userClickCallBackTracker.setOfferId(offerDetails.getOfferId());
				userClickCallBackTracker.setPendingAmountCredit(offerDetails.getPendingAmountCredit());
				userClickCallBackTracker.setPendingRecCount(offerDetails.getPendingRecCount());
				userClickCallBackTracker.setPendingRecDay(offerDetails.getPendingRecDay());
				userClickCallBackTracker.setTid(callBackTid);
				userClickCallBackTracker.setOfferPaymentType(offerDetails.getOfferPaymentType());
				userClickCallBackTrackerRepository.save(userClickCallBackTracker);
				
				actionUrl = offerDetails.getActionUrl().substring(0,offerDetails.getActionUrl().indexOf("="))+callBackTid;
			}
			else {

				/*String urlAppend = URLEncoder.encode(",123,"+user.getEttId()+","+System.currentTimeMillis()+","+offerDetails.getOfferId());
				//String urlAppend = URLEncoder.encode(",123,"+ettId+","+System.currentTimeMillis()+","+offerDetails.getOfferId()+"#"+offerDetails.getOfferCat());
				actionUrl = offerDetails.getActionUrl() + urlAppend ;*/
				if(offerDetails.getVendor() != null && offerDetails.getVendor().equals("mobusi")){
					String urlMobusi = param.substring(0, param.indexOf("|"));
					String urlAppend = URLEncoder.encode(",123,"+user.getEttId()+","+System.currentTimeMillis()+","+offerDetails.getOfferId()+","+urlMobusi);
					actionUrl = offerDetails.getActionUrl() + urlAppend ;
				}else if(offerDetails.getVendor()!=null && offerDetails.getVendor().equalsIgnoreCase("unlockar")) {
					String encodeData = (",123,"+user.getEttId()+","+System.currentTimeMillis()+","+offerDetails.getOfferId()).replaceAll(",", "B");
					String urlAppend = URLEncoder.encode(encodeData);
					//String urlAppend = URLEncoder.encode(",123,"+ettId+","+System.currentTimeMillis()+","+offerDetails.getOfferId()+"#"+offerDetails.getOfferCat());
					actionUrl = offerDetails.getActionUrl().replaceAll("\\|", "A") + urlAppend ;
					//actionUrl = actionUrl.replace("|","A");
					//actionUrl = actionUrl.replace(",","B");
					
				}else {
					String urlAppend = URLEncoder.encode(",123,"+user.getEttId()+","+System.currentTimeMillis()+","+offerDetails.getOfferId());
					//String urlAppend = URLEncoder.encode(",123,"+ettId+","+System.currentTimeMillis()+","+offerDetails.getOfferId()+"#"+offerDetails.getOfferCat());
					actionUrl = offerDetails.getActionUrl() + urlAppend ;
				}
				
			}
			actionUrl = actionUrl.replaceFirst("\\{android_id\\}", user.getDeviceId());
			if(actionUrl.indexOf("{idfa}")>-1 || actionUrl.indexOf("{aifa}")>-1) {
				DeviceToken deviceToken = deviceTokenRepository.findByEttId(user.getEttId());
				actionUrl = actionUrl.replaceFirst("\\{idfa\\}",deviceToken.getAdvertisingId() );
				actionUrl = actionUrl.replaceFirst("\\{aifa\\}", deviceToken.getAndroidId());
			}
			offersDto.setActionUrl(actionUrl);
			offersDto.setAmount(offerDetails.getOfferAmount()+"");
			offersDto.setSize(offerDetails.getSize());
			offersDto.setType(offerDetails.getOfferType());
			try {
				offersDto.setPlayStoreDetails(offerDetails.getPlayStoreDetails().replace("#appSize#", offerDetails.getSize()).replace("()", ""));
			}catch(Exception ex){}
			offersDto.setRating(offerDetails.getRating());
			
			
			if(offerDetails.getInstructions() !=null) {
				try {
					String instruction[] = offerDetails.getInstructions().split(";");
					//String instructionText [] = new String[instruction.length];
					//String instStringRate [] = new String[instruction.length];
					int ii =0;
					List<OfferInstructionDto> OfferInstructionDtolist = new ArrayList<OfferInstructionDto>(instruction.length);
					for(String inst:instruction){
						//instructionText[ii]=inst.split("#")[0];
						//instStringRate[ii]=inst.split("#")[1];
						OfferInstructionDto offerInstructionDto = new OfferInstructionDto();
						offerInstructionDto.setInstructionsText(inst.split("\\$")[0].replace("#INSTALLEDAMOUNT#", (offerDetails.getOfferAmount()-offerDetails.getPendingAmountCredit()+"")).replace("#AMOUNT#", offerDetails.getOfferAmount()+"").replace("#OFFER_CREDIT_DAYS#", offerDetails.getBalanceCreditInDays()+"").replace("#PENDINGAMOUNT#", offerDetails.getPendingAmountCredit()+"").replace("#PENDINGRECCOUNT#", offerDetails.getPendingRecCount()+"").replace("#PENDINGRECDAY#", offerDetails.getPendingRecDay()+""));
						offerInstructionDto.setInstStringAmount(inst.split("\\$")[1].replace("#INSTALLEDAMOUNT#", (offerDetails.getOfferAmount()-offerDetails.getPendingAmountCredit()+"")).replace("#AMOUNT#", offerDetails.getOfferAmount()+"").replace("#OFFER_CREDIT_DAYS#", offerDetails.getBalanceCreditInDays()+"").replace("#PENDINGAMOUNT#", offerDetails.getPendingAmountCredit()+"").replace("#PENDINGRECCOUNT#", offerDetails.getPendingRecCount()+"").replace("#PENDINGRECDAY#", offerDetails.getPendingRecDay()+""));
						
						if(ii==00){
							offerInstructionDto.setStatus(1);
						}
						else {
							offerInstructionDto.setStatus(0);
						}
						ii++;
						OfferInstructionDtolist.add(offerInstructionDto);
					}
					
					if((offerDetails.getPayoutType().equals("DATAUSAGE") || offerDetails.getMaxCreditLimit()>=1.0f) && Float.parseFloat(user.getAppVersion())>=2.0f) {
					//	DATA_USAGE_INSTRUCTION
						OfferInstructionDto offerInstructionDto = new OfferInstructionDto();
						offerInstructionDto.setInstructionsText(rechargeService.getLocaleTextTemplate().get("DATA_USAGE_INSTRUCTION_"+user.getLocale()).replace("#amountPerDataThreshold#", ((int)offerDetails.getAmountPerDataThreshold())+"").replace("#dataThreshold#", (offerDetails.getDataThreshold()/1024)+"").replace("#maxCreditPerDayLimit#", ((int)offerDetails.getMaxCreditPerDayLimit())+"").replace("#maxCreditLimit#", offerDetails.getMaxCreditLimit()+""));
						offerInstructionDto.setInstStringAmount(offerDetails.getMaxCreditLimit()+"");
						OfferInstructionDtolist.add(offerInstructionDto);
					}
					
					offersDto.setOfferInstructionDto(OfferInstructionDtolist);
					//offersDto.setInstructionsText(instructionText);
					//offersDto.setInstStringAmount(instStringRate);
					
				}
				catch(Exception exx1){
					LOGGER.error("[error in instruction configuraion offerId]["+offerDetails.getOfferId()+"]["+offerDetails.getAppKey()+"]");
				}
				
			}
			//offersDto.setInstructions(offerDetails.getInstructions());
			if(offerDetails.getAppDescription() == null || offerDetails.getAppDescription().equalsIgnoreCase("null") || offerDetails.getAppDescription().length()==0 ){
				offersDto.setAppDescription("<html><body><font color=\"#FF8000\">detailed instructions</font><br/><br/>"+offerDetails.getAlertText().replaceAll("\n", "<br/>").replaceAll("Rs.",(char) Integer.parseInt( "20B9", 16 )+"").replaceFirst("\\*\\*", "<B>").replace("\\*\\*", "</B>")+"</body></html>");
			}
			else if(offerDetails.getAppDescription().indexOf("<html>")>-1 && offerDetails.getAppDescription().indexOf("</html>")>-1){
				offersDto.setAppDescription(offerDetails.getAppDescription().replaceAll("Rs.",(char) Integer.parseInt( "20B9", 16 )+""));
			}
			else {
				offersDto.setAppDescription("<html><body><font color=\"#FF8000\">description</font><br/><br/>"+offerDetails.getAppDescription().replaceAll("Rs.",(char) Integer.parseInt( "20B9", 16 )+"").replaceAll("\n", "<br/>")+"<br/><br/><font color=\"#FF8000\">detailed instructions</font><br/><br/>"+offerDetails.getAlertText().replaceAll("Rs.",(char) Integer.parseInt( "20B9", 16 )+"").replace("\n", "<br/>").replaceFirst("\\*\\*", "<B>").replace("\\*\\*", "</B>")+"</body></html>");
			}
			offersDto.setDetailedInstructions(offerDetails.getDetailedInstructions());
			if(offerDetails.getPayoutOn().toString().equals("healthQuery")) {
				offersDto.setPayoutOn("Ask health query");
			}
			else if(offerDetails.getPayoutOn().toString().equals("searchFlight")) {
				offersDto.setPayoutOn("Search for Flight");
			}
			else {
				offersDto.setPayoutOn(offerDetails.getPayoutOn().toString());
			}
			offersDto.setPayoutType(offerDetails.getPayoutType().toString());
			offersDto.setOfferCategory(offerDetails.getOfferCategory());
			offersDto.setTitle(offerDetails.getTitle());
			if(offerDetails.getPendingAmountCredit()>=1){
				
			}
			if(offerDetails.getOfferAmount()<offerDetails.getPendingAmountCredit()){
				LOGGER.error("offer wrong configured offerAmount is lesser then pendingAmountCredit offerId{},offerAmount{},PendingAmountCredit{}",offerDetails.getOfferId(),offerDetails.getOfferAmount(),offerDetails.getPendingAmountCredit());
				continue;
			}
			if(offerDetails.getPayoutType().toString().equalsIgnoreCase("SHARE") ){
				offersDto.setAlertText(rechargeService.getLocaleTextTemplate().get("SHARETEXT_"+user.getLocale()).replace("#ETTID#", user.getEttId()+"").replace("#OFFERID#", offerDetails.getOfferId()+"").replace("#OFFERNAME#", offerDetails.getOfferName().replace("Invite friends to ", "").replace("Recommend ", "").replace("Rs.",(char) Integer.parseInt( "20B9", 16 )+"")));
				offersDto.setActionUrl(rechargeService.getAppConfig().get("SHAREURL").replace("#ETTID#", user.getEttId()+"").replace("#OFFERID#", offerDetails.getOfferId()+""));
				
				//offersDto.setDescription("");
			}
			else {
				offersDto.setAlertText(offerDetails.getAlertText().replace("#INSTALLEDAMOUNT#", (offerDetails.getOfferAmount()-offerDetails.getPendingAmountCredit()+"")).replace("#AMOUNT#", offerDetails.getOfferAmount()+"").replace("#OFFER_CREDIT_DAYS#", offerDetails.getBalanceCreditInDays()+"").replace("#PENDINGAMOUNT#", offerDetails.getPendingAmountCredit()+"").replace("#PENDINGRECCOUNT#", offerDetails.getPendingRecCount()+"").replace("#PENDINGRECDAY#", offerDetails.getPendingRecDay()+"").replace("Rs.",(char) Integer.parseInt( "20B9", 16 )+""));
			}
			offersDto.setPackageName(offerDetails.getPackageName());
			offersDtoList.add(offersDto);
			
		}
		
		return offersDtoList;
	}
}